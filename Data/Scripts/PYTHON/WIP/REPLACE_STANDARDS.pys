import win32com
app = Application

selection = win32com.client.Dispatch( "XSI.Collection" )
selection.AddItems (app.Selection)

for obj in selection:
	Material = obj
	Shader = app.EnumElements(Material.surface)(0)
	if app.EnumElements(Material.normal):
		BumpMap=app.EnumElements(Material.normal)(0)
		#BumpHeight= app.GetValue(str(BumpMap)+".scale")
		BumpInput = app.EnumElements(BumpMap.input)(0)
	else:
		BumpMap,BumpInput = False,False
	if 'standard' in str(Shader):
		ShaderColor = app.EnumElements(str(Shader)+".Kd_color")
		kscolor = app.EnumElements(str(Shader)+".Ks_color")
		r,g,b = ShaderColor[0].value,ShaderColor[1].value,ShaderColor[2].value
		sr,sg,sb = kscolor[0].value,kscolor[1].value,kscolor[2].value
		print r,g,b
		
		kd = app.GetValue(str(Shader)+".Kd")
		Shiny =app.GetValue(str(Shader)+".Ks")
		kt = app.GetValue(str(Shader)+".Kt")
		specFres = app.GetValue(str(Shader)+".specular_Fresnel")
		Ksn = app.GetValue(str(Shader)+".Ksn")
		
		
		NewShinyValue=Shiny
		ShinyMap = app.EnumElements(str(Shader)+".Ks_color")
		
		IOR =app.GetValue(str(Shader)+".IOR")
		OpacityColor = app.EnumElements(str(Shader)+".opacity")
		
		emcolor = app.EnumElements(str(Shader)+".emission_color")
		emr,emg,emb, = emcolor[0].value,emcolor[1].value,emcolor[2].value
		emision = app.GetValue(str(Shader)+".emission")
		
		
		txtcolor,txtspec,txtspeccolor,txtopacity = False,False,False,False
		
		if len(ShaderColor) != 4:
			txtcolor = True
			ColorMap = app.RemoveShaderFromCnxPoint(str(Shader)+".*.out", str(Shader)+".Kd_color", False)
		if len(kscolor) != 4:
			txtspeccolor = True
			SpeccolorMap = app.RemoveShaderFromCnxPoint(str(Shader)+".*.out", str(Shader)+".Ks_color", False)
		if app.EnumElements(str(Shader)+".Ks") != None: 
			if len(app.EnumElements(str(Shader)+".Ks"))!= 4:
				SpecMap = app.RemoveShaderFromCnxPoint(str(app.EnumElements(str(Shader)+".Ks"))+".out", str(Shader)+".Ks", False)
				txtspec = True
		if len(OpacityColor) != 4:
			txtopacity = True
			OpacityMap = app.RemoveShaderFromCnxPoint(OpacityColor(4), str(Shader)+".opacity", False)
			
		Standard = app.CreateShaderFromProgID("ArnoldCoreShaders.standard.1.0", str(Material))
		
		if BumpMap and BumpInput != False:
			try:Bump2d = app.CreateShaderFromProgID("Softimage.bump2d.1.0", str(Material))
			except:Bump2d = app.CreateShaderFromProgID("ArnoldCoreShaders.bump2d.1.0", str(Material))
			
			app.SIConnectShaderToCnxPoint(str(Bump2d)+".out", str(Material)+".surface", False)
			app.SIConnectShaderToCnxPoint(str(Standard)+".out", str(Bump2d)+".shader", False)
			
			try:
				app.SIConnectShaderToCnxPoint(str(BumpInput.fullname), str(Bump2d)+".bump_map", False)
				app.RemoveShaderFromCnxPoint(str(BumpMap)+".out", str(Material)+'.normal', False)
			except:
				continue

		else:
			app.SIConnectShaderToCnxPoint(str(Standard)+".out", str(Material)+".surface", False)
			
		Kdcolor = Standard.Kd_color
		Kscolor = Standard.Ks_color
		Emcolor = Standard.emission_color
		
		Kdcolor[0].value,Kdcolor.green.value,Kdcolor.blue.value = r,g,b
		print r,g,b
		Kscolor.red.value,Kscolor.green.value,Kscolor.blue.value = sr,sg,sb
		Emcolor.red.value,Emcolor.green.value,Emcolor.blue.value = emr,emg,emb
		
		Standard.emission.value = emision
		Standard.Kd.value = kd
		Standard.Kt.value = kt
		Standard.Ks.value = NewShinyValue
		Standard.IOR.value = IOR
		Standard.specular_Fresnel = specFres
		Standard.Ksn = Ksn
		
		
		if txtcolor == True:app.SIConnectShaderToCnxPoint(str(ColorMap)+".out", str(Standard)+".Kd_color", False)
		if txtspec == True:	app.SIConnectShaderToCnxPoint(str(SpecMap)+".out", str(Standard)+".Ks", False)
		if txtspeccolor == True:app.SIConnectShaderToCnxPoint(str(SpeccolorMap)+".out", str(Standard)+".Ks_color", False)
		if txtopacity == True:app.SIConnectShaderToCnxPoint(str(OpacityMap)+".out", str(Standard)+".opacity", False)
		

