# AA_GEO_SWITCHPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Fri Jan 31 10:13:52 UTC+0100 2014 by javier
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants

null = None
false = 0
true = 1

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Pedro"
	in_reg.Name = "PC_Ass_Geo_Switcher"
	in_reg.Major = 1
	in_reg.Minor = 0

	in_reg.RegisterCommand("PC_Ass_Geo_Switcher","PC_Ass_Geo_Switcher")
	#RegistrationInsertionPoint - do not remove this line
	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."),constants.siVerbose)
	return true

def PC_Ass_Geo_Switcher_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	return true

def PC_Ass_Geo_Switcher_Execute(  ):

	Application.LogMessage("ASS_GEO_SWITCH_Execute called",constants.siVerbose)
	# 
	xsi = Application
	import os
	import win32com
	from win32com.client import constants as c

	MPath = xsi.ActiveProject2.Path + '/'
	r = r"/Models\""
	p= r[:len(r)-1]
	Path = xsi.ActiveProject2.Path + str(p)
	MODELS = win32com.client.Dispatch( "XSI.Collection" )
	NEWMODELS = win32com.client.Dispatch( "XSI.Collection" )
	scene = xsi.ActiveProject.ActiveScene
	AllPasses = []
	Partitions = win32com.client.Dispatch( "XSI.Collection" )
	AllPartitions = win32com.client.Dispatch( "XSI.Collection" )

	for Pass in scene.Passes:
		AllPasses.append(Pass.fullname)
		for partition in Pass.Partitions:
			AllPartitions.AddItems(partition)
			
	for element in AllPartitions:
		if 'Lights' not in element.name:
			if element not in Partitions:
				Partitions.AddItems(element)


	for element in xsi.Selection:
		if element.type == '#model':
			if element.referenced_model.value == True :
				MODELS.AddItems(element)

	for REFMODEL in MODELS:
		MODEL = Application.GetValue(str(REFMODEL)+'.file')
		'''if 'Models' in MODEL:
			MODEL = MPath + str(MODEL).replace('Models/','')'''
		PADRE = REFMODEL.Parent
		cancelado = False	

		if "ASS" in str(MODEL):
			print str(REFMODEL) + '_IS ASS'
			a= True
		elif "GEO" in str(MODEL):
			print str(REFMODEL) + '_IS GEO'
			a= False

		else:
			print("MALA_NOMENCLATURA",2)
			cancelado = True
			
		if cancelado:
			print("ABORTANDO!")
		if not cancelado:	
			if a:	
				NEW_MODEL = MODEL.replace("ASS" , "GEO")
			else:
				NEW_MODEL = MODEL.replace("GEO" , "ASS")
		exsist = False
		for root, dirs, files in os.walk(Path, topdown=False):
			for name in files:
				p =(os.path.join(root,''))
				a =(os.path.join(root, name))
				#print str(NEW_MODEL) 
				#print a
				if str(NEW_MODEL) in a:
					RUTA_IMPORT = a
					exsist = True
		if exsist == True:
			print("EXISTE NEW_MODEL")
			print(RUTA_IMPORT)
			print str(REFMODEL.name)
			if 'ASS' in str(REFMODEL.name): 
				n = str(REFMODEL.name).replace('ASS','GEO')
			elif 'GEO' in str(REFMODEL.name):
				n = str(REFMODEL.name).replace('GEO','ASS')
			else:
				n= str(REFMODEL.name)
				
			#REFMODEL.name = REFMODEL.name+'_Borrar'
			IMPORTADO = xsi.SICreateRefModel(str(RUTA_IMPORT), n, "", PADRE.name, "", "", "")
			NEWMODELS.AddItems(IMPORTADO)
			xsi.MatchTransform(IMPORTADO, REFMODEL, "siSRT", "")
			print IMPORTADO
			for partition in Partitions:
				for obj in partition.Members:
					for child in REFMODEL.Children:
						if str(child.name) in str(obj):
							for newchild in IMPORTADO.Children:
								print newchild
								print obj
								print partition.fullname
								xsi.MoveToPartition(partition.fullname, str(newchild))
			
			xsi.DeleteObj("B:" + str(REFMODEL))
		else:
			print 'NO EXISTE NEW_MODEL'
	xsi.SelectObj(NEWMODELS,'BRANCH')		
	# 
	return true


